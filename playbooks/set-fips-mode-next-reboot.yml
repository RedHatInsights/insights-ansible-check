---
- hosts: all
  user: root
  tasks:
    # This playbook modifies the system such that next time the system boots, it will
    # be in fips mode.

    # This playbook is UNSAFE because of the assumptions it makes.

    # It assumes that the currently running system was booted from its current default
    # grubby entry.  More specifically it assumes that the following things are the
    # same in both the currently running system and the current default grubby entry:
    #   kernel version
    #   initrd
    #   boot device
    #   root device

    # If these assumptions are not true, running this playbook could make your system
    # unbootable.

    # The easiest way to ensure that these assumptions are true is to reboot the system
    # just before running this script.

    # The easist way to break these assumptions is to upgrade the kernel, without rebooting,
    # just before running this script.

    # This script should be modified to check these assumptions before running, but my
    # ansible-playbook-foo is not up to that yet.

    # The following assumes the default grub entry, the entry that will be used for
    # the next reboot, is the same entry that was used for the current boot.
    # If the root device differs, then the following un-prelinking is working on the
    # wrong root device.  If the kernel version differs then the following rebuilds the
    # wrong initrd, and modifies the wrong grub entry.
  
    # This script should be modified to check these assumptions before running, but my
    # ansible-playbook-foo is not up to that yet.  The script could also be modified to
    # reboot before running.  Another posibility is that this script could simply create
    # a new default grubby entry, leaving the existing entries untouched.
    
    - name: Is the prelink package absent?
      package: name=prelink state=absent
      check_mode: yes
      failed_when: no
      register: prelink_absent
  
    - name: Unprelink everything
      when: prelink_absent.changed
      check_mode: no
      command: prelink -uav {% if ansible_check_mode %} -n {% endif %}
      failed_when: no
      register: unprelink_task
      changed_when: unprelink_task.stdout
  
    - name: Remove the prelink package
      package: name=prelink state=absent
      failed_when: no
  
    - name: Install dracut-fips
      package: name=dracut-fips state=present
  
    - name: Does the hardware and kernel support aes?
      command: grep -w aes /proc/cpuinfo
      failed_when: no
      changed_when: no
      check_mode: no
      register: is_aesni

    # This sometimes fails on RHEL6 because of mismatched versions of dracut-fips and dracut-fips-aesni
    #  since it is optional, just ignore failures
    - name: Install dracut-fips-aesni if it is supported
      package: name=dracut-fips-aesni state=present
      when: not is_aesni.rc
      failed_when: no
  
    - name: Rebuild current initrd
      command: dracut --force /boot/initramfs-{{ ansible_kernel }}.img {{ ansible_kernel }}  
  
    - name: Find boot partition
      command: findmnt -no uuid /boot
      check_mode: no
      changed_when: no
      register: findmnt_boot_task
  
    - name: Update grub entries for current kernel
      command: grubby --update-kernel=/boot/vmlinuz-{{ ansible_kernel }} --args="fips=1 boot=UUID={{ findmnt_boot_task.stdout }}"
    
