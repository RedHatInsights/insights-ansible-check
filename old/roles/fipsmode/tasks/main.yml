---
- name: Is fips mode already enabled? (using debug module)
  debug: msg="fips mode {% if not ansible_fips %}NOT{% endif %} enabled"

- name: Is fips mode already enabled? (using set_fact/changed_when module)
  set_fact:
    dummy: False
  changed_when: not ansible_fips

# If we are not already in fips mode, then we unconditionally try to set things up
# so the next reboot is into fips mode.

- name: Prepare system for FIPS mode
  when: not ansible_fips
  block:

  # The following modifies the system such that next time the system boots, it will
  # be in fips mode.  Currently we are not testing if the "next reboot" is already
  # set up to go into fips mode, we just assume that if we are already in fips
  # mode, we don't care about the state of the next reboot.  Possibly a bad assumption.

  # But we should care about the state of the next reboot.  First off, because it could
  # be a wrong assumption, and the script could do-unexpected-things.  But more importantly,
  # our purpose here is to run well in --check mode.  In --check mode, these unconditional
  # calls to grubby and dracut commands are just skipped, meaning --check mode don't tell
  # us anything.

  # There are a number of ways this can go wrong.
  # Before running this playbook, ensure that the system was booted from the current
  # default boot entry.  The most common way for this to not be true is when a new
  # kernel version has been installed, but the system has not yet been rebooted into
  # that kernel using it's new default grub entry.
  #
  # The following assumes the default grub entry, the entry that will be used for
  # the next reboot, is the same entry that was used for the current boot.
  # If the root device differs, then the following un-prelinking is working on the
  # wrong root device.  If the kernel version differs then the following rebuilds the
  # wrong initrd, and modifies the wrong grub entry.

  # The following should be modified to do the following:
  # Find the current default grubby entry.
  # if it is already set up for fips mode, do nothing else
  # otherwise,
  #   if the kernel version to be booted IS NOT the kernel we are running now, fail with message.
  #   if the root device to be booted IS NOT the current boot device, fail with message
  #   otherwise
  #     continue with all of what are doing below except for the grubby command
  #        which shoud be changed to --update the default entry, rather than the ones with the
  #          given kernel version

  # It might also make sense for us to create a new grubby entry with fips mode, rather than
  # change the current one.
  #
  # We should (possibly?) also be setting the default kernel parameters in grubby.conf
  #
  # We should (possibly?) also be installing prelink, and then uninstalling it, to look for
  # and unprelink, and prelinked DSOs. Or we should find another way to test for the existance
  # of prelinked DSOs (there must be one, i just don't know what it is off the top of my head).
  #
  # We should build and use grubby, dracut, and sysctl modules (or similar) that work well in
  # --check mode.  There currently is no grubby or dracut modules, and the sysctl module does
  # not work well for crypto.fips_enabled in --check mode because of the read-only nature of
  # crypto.fips_enabled.
  
  - name: Is the prelink package absent?
    package: name=prelink state=absent
    check_mode: yes
    failed_when: no
    register: prelink_absent

  - name: Unprelink everything
    when: prelink_absent.changed
    check_mode: no
    command: prelink -uav {% if ansible_check_mode %} -n {% endif %}
    failed_when: no
    register: unprelink_task
    changed_when: unprelink_task.stdout

  - name: Remove the prelink package
    package: name=prelink state=absent
    failed_when: no
    register: prelink_absent

  - name: Install dracut-fips
    package: name=dracut-fips state=present

  - name: Does the hardware and kernel support aes?
    command: grep -w aes /proc/cpuinfo
    failed_when: no
    changed_when: no
    check_mode: no
    register: is_aesni

  - name: Install dracut-fips-aesni if it is supported
    package: name=dracut-fips-aesni state=present
    when: not is_aesni.rc

  - name: Rebuild current initrd
    command: dracut --force /boot/initramfs-{{ ansible_kernel }}.img {{ ansible_kernel }}  

  - name: Find boot partition
    command: findmnt -no uuid /boot
    check_mode: no
    changed_when: no
    register: findmnt_boot_task

  - name: Update grub entries for current kernel
    command: grubby --update-kernel=/boot/vmlinuz-{{ ansible_kernel }} --args="fips=1 boot=UUID={{ findmnt_boot_task.stdout }}"
  
  - name: Reboot
    shell: sleep 2 && reboot
    async: 1
    poll: 0
    ignore_errors: true
    when: not ansible_check_mode
