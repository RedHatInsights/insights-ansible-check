- hosts: all
  user: root
  tasks:

  - name: Query sysctl crypto.fips_enabled
    command: sysctl -n crypto.fips_enabled 
    changed_when: no
    check_mode: no
    register: sysctl_task

  - name: Is fips mode already enabled (sysctl crypto.fips_enabled)?
    set_fact:
      crypto_fips_enabled: "{{ sysctl_task.stdout != '0' }}"
    changed_when: sysctl_task.stdout == '0'

  - name: Prepare system for FIPS mode
    when: not crypto_fips_enabled 
    block:    

    # Before running this playbook, ensure that the system was booted from the current
    # default boot entry.  The most common way for this to not be true is when a new
    # kernel version has been installed, but the system has not yet been rebooted into
    # that kernel using it's grub entry.
    #
    # The following assumes the default grub entry, the entry that will be used for
    # the next reboot, is the same entry that was used for the current boot.
    # If the root device differs, then the following un-prelinking is working on the
    # wrong root device.  If the kernel version differs then the following rebuilds the
    # wrong initrd, and modifies the wrong 

    - name: Is the prelink package absent?
      package: name=prelink state=absent
      check_mode: yes
      failed_when: no
      register: prelink_absent
  
    - name: Unprelink everything
      when: prelink_absent.changed
      check_mode: no
      command: prelink -uav {% if ansible_check_mode %} -n {% endif %}
      failed_when: no
      register: unprelink_task
      changed_when: unprelink_task.stdout
  
    - name: Remove the prelink package
      package: name=prelink state=absent
      failed_when: no
      register: prelink_absent
  
    - name: Install dracut-fips
      package: name=dracut-fips state=present

    - name: Does the hardware and kernel support aes?
      command: grep -w aes /proc/cpuinfo
      failed_when: no
      changed_when: no
      check_mode: no
      register: is_aesni
  
    - name: Install dracut-fips-aesni if it is supported
      package: name=dracut-fips-aesni state=present
      when: not is_aesni.rc
  
    - name: Rebuild current initrd
      command: dracut --force /boot/initramfs-{{ ansible_kernel }}.img {{ ansible_kernel }}  
  
    - name: Find boot partition
      command: findmnt -no uuid /boot
      check_mode: no
      changed_when: no
      register: findmnt_boot_task
  
    - name: Update grub entries for current kernel
      command: grubby --update-kernel=/boot/vmlinuz-{{ ansible_kernel }} --args="fips=1 boot=UUID={{ findmnt_boot_task.stdout }}"
    
    - name: Reboot
      shell: sleep 2 && reboot
      async: 1
      poll: 0
      ignore_errors: true
      when: not ansible_check_mode
